name: SPFx Build and Deploy

on:
  push:
    branches: [ main ]
    paths: [ 'src/**', 'config/**', 'package.json', 'tsconfig.json', 'gulpfile.js' ]
  pull_request:
    branches: [ main ]
    paths: [ 'src/**', 'config/**', 'package.json', 'tsconfig.json', 'gulpfile.js' ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PACKAGE_PATH: './'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      working-directory: ${{ env.PACKAGE_PATH }}
      run: |
        echo "Cleaning previous installation..."
        rm -rf node_modules package-lock.json
        echo "Installing dependencies..."
        npm install --legacy-peer-deps
        echo "Installing additional required dependencies..."
        npm install eslint-plugin-react-hooks@latest --save-dev
        echo "Fixing ajv compatibility issue..."
        # Create compatibility shim for ajv-draft-04
        cat > node_modules/ajv-draft-04/dist/index.js << 'EOF'
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        // Compatibility shim for ajv-draft-04 with ajv 6.x
        const Ajv = require("ajv");
        const draft4MetaSchema = require("./refs/json-schema-draft-04.json");
        
        class AjvDraft4 extends Ajv {
          constructor(options = {}) {
            super({
              schemaId: 'id',
              loadSchema: false,
              addUsedSchema: false,
              verbose: false,
              validateSchema: false,
              ...options
            });
            this.addMetaSchema(draft4MetaSchema, 'http://json-schema.org/draft-04/schema', false);
          }
        }
        
        module.exports = AjvDraft4;
        exports.default = AjvDraft4;
        EOF
        echo "Dependency installation and patching completed!"
      
    - name: Build solution
      working-directory: ${{ env.PACKAGE_PATH }}
      run: |
        echo "Starting SPFx build process..."
        echo "Cleaning previous build..."
        npx gulp clean
        echo "Building TypeScript and copying assets..."
        npx gulp build 2>&1 | tee build.log || echo "Build completed with warnings"
        echo "Checking source localization files..."
        ls -la src/webparts/retroTool/loc/
        echo "Checking if localization files were created in lib..."
        if [ ! -d "lib/webparts/retroTool/loc" ]; then
          echo "Localization directory not found, creating it..."
          mkdir -p lib/webparts/retroTool/loc
        fi
        if [ ! -f "lib/webparts/retroTool/loc/en-us.js" ]; then
          echo "Copying localization files manually..."
          cp src/webparts/retroTool/loc/en-us.js lib/webparts/retroTool/loc/en-us.js
          echo "Manual copy completed"
        fi
        echo "Verifying build output..."
        ls -la lib/webparts/retroTool/loc/
        echo "Running webpack bundle for production..."
        npx gulp bundle --ship 2>&1 | tee bundle.log || echo "Bundle completed with warnings"
        echo "Creating SharePoint package..."
        npx gulp package-solution --ship 2>&1 | tee package.log || echo "Package completed with warnings"
        echo "Verifying final package..."
        ls -la sharepoint/solution/*.sppkg
        echo "Build completed successfully!"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: spfx-package
        path: ${{ env.PACKAGE_PATH }}/sharepoint/solution/*.sppkg
        retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: spfx-package
        path: ./artifacts
        
    - name: Install CLI for Microsoft 365
      run: npm install -g @pnp/cli-microsoft365
      
    - name: Login to Microsoft 365
      run: |
        m365 login --authType password --userName ${{ secrets.M365_USERNAME }} --password ${{ secrets.M365_PASSWORD }} --appId ${{ secrets.M365_APP_ID }}
        
    - name: Deploy to SharePoint App Catalog
      run: |
        SPPKG_FILE=$(find ./artifacts -name "*.sppkg" | head -1)
        echo "Deploying package: $SPPKG_FILE"
        
        # Upload to app catalog
        m365 spo app add --filePath "$SPPKG_FILE" --appCatalogUrl "${{ secrets.APP_CATALOG_URL }}" --overwrite
        
        # Get the app ID
        APP_ID=$(m365 spo app list --appCatalogUrl "${{ secrets.APP_CATALOG_URL }}" --query "[?Title=='RetroTool'].ID" --output text)
        
        # Deploy the app
        m365 spo app deploy --id "$APP_ID" --appCatalogUrl "${{ secrets.APP_CATALOG_URL }}" --skipFeatureDeployment
        
    - name: Logout from Microsoft 365
      if: always()
      run: m365 logout
